"""
Auto-generated abstract methods based on JSON-RPC OpenAPI specification.
"""

from abc import ABC, abstractmethod


class BlockchainAdapter(ABC):
    @abstractmethod
    async def web3_clientVersion(self) -> str: ...

    @abstractmethod
    async def web3_sha3(self, data: str) -> str: ...

    @abstractmethod
    async def net_version(self) -> str: ...

    @abstractmethod
    async def net_listening(self) -> str: ...

    @abstractmethod
    async def net_peerCount(self) -> str: ...

    @abstractmethod
    async def eth_syncing(self) -> str: ...

    @abstractmethod
    async def eth_chainId(self) -> str: ...

    @abstractmethod
    async def eth_blockNumber(self) -> str: ...

    @abstractmethod
    async def eth_gasPrice(self) -> str: ...

    @abstractmethod
    async def eth_feeHistory(
        self, block_count: str, newest_block: str, reward_percentiles: list[str]
    ) -> str: ...

    @abstractmethod
    async def eth_maxPriorityFeePerGas(self) -> str: ...

    @abstractmethod
    async def eth_getBalance(self, address: str, block: str) -> str: ...

    @abstractmethod
    async def eth_getStorageAt(self, address: str, position: str, block: str) -> str: ...

    @abstractmethod
    async def eth_getTransactionCount(self, address: str, block: str) -> str: ...

    @abstractmethod
    async def eth_getCode(self, address: str, block: str) -> str: ...

    @abstractmethod
    async def eth_call(self, call_object: dict, block: str, overrides: dict = None) -> str: ...

    @abstractmethod
    async def eth_estimateGas(self, tx: dict, block: str, overrides: dict = None) -> str: ...

    @abstractmethod
    async def eth_getBlockByHash(self, block_hash: str, full_tx: bool) -> str: ...

    @abstractmethod
    async def eth_getBlockByNumber(self, block_number: str, full_tx: bool) -> str: ...

    @abstractmethod
    async def eth_getBlockTransactionCountByHash(self, block_hash: str) -> str: ...

    @abstractmethod
    async def eth_getBlockTransactionCountByNumber(self, block_number: str) -> str: ...

    @abstractmethod
    async def eth_getTransactionByHash(self, tx_hash: str) -> str: ...

    @abstractmethod
    async def eth_getTransactionReceipt(self, tx_hash: str) -> str: ...

    @abstractmethod
    async def eth_getLogs(self, filter_params: dict) -> str: ...

    @abstractmethod
    async def debug_traceTransaction(self, tx_hash: str, options: dict) -> str: ...

    @abstractmethod
    async def debug_traceCall(self, call_object: dict, block: str, options: dict) -> str: ...

    @abstractmethod
    async def debug_traceBlock(self, rlp_encoded_block: str, options: dict) -> str: ...

    @abstractmethod
    async def debug_traceBlockByHash(self, block_hash: str, options: dict) -> str: ...

    @abstractmethod
    async def debug_traceBlockByNumber(self, block_number: str, options: dict) -> str: ...

    @abstractmethod
    async def trace_call(self, call_object: dict, trace_types: list[str], block: str) -> str: ...

    @abstractmethod
    async def trace_callMany(self, calls: list[tuple[dict, list[str]]], block: str) -> str: ...

    @abstractmethod
    async def trace_rawTransaction(self, raw_tx: str, trace_types: list[str]) -> str: ...

    @abstractmethod
    async def trace_replayTransaction(self, tx_hash: str, trace_types: list[str]) -> str: ...

    @abstractmethod
    async def trace_replayBlockTransactions(
        self, block_number: str, trace_types: list[str]
    ) -> str: ...

    @abstractmethod
    async def trace_block(self, block_number: str) -> str: ...
