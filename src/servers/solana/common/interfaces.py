"""
Auto-generated abstract methods based on JSON-RPC OpenAPI specification.
"""

from abc import ABC, abstractmethod


class BlockchainAdapter(ABC):
    @abstractmethod
    async def getaccountinfo(self, account: str, options: str) -> str: ...
    @abstractmethod
    async def getbalance(self, param1: str) -> str: ...
    @abstractmethod
    async def getblock(self, param1: str, encoding: str) -> str: ...
    @abstractmethod
    async def getblockcommitment(self, param1: str) -> str: ...
    @abstractmethod
    async def getblockheight(self) -> str: ...
    @abstractmethod
    async def getblockproduction(self) -> str: ...
    @abstractmethod
    async def getblocks(self, param1: str) -> str: ...
    @abstractmethod
    async def getblockswithlimit(self, param1: str) -> str: ...
    @abstractmethod
    async def getblocktime(self, param1: str) -> str: ...
    @abstractmethod
    async def getclusternodes(self) -> str: ...
    @abstractmethod
    async def getepochinfo(self) -> str: ...
    @abstractmethod
    async def getepochschedule(self) -> str: ...
    @abstractmethod
    async def getfeeformessage(self, account: str, options: str) -> str: ...
    @abstractmethod
    async def getfirstavailableblock(self) -> str: ...
    @abstractmethod
    async def getgenesishash(self) -> str: ...
    @abstractmethod
    async def gethighestsnapshotslot(self) -> str: ...
    @abstractmethod
    async def getidentity(self) -> str: ...
    @abstractmethod
    async def getinflationgovernor(self) -> str: ...
    @abstractmethod
    async def getinflationrate(self) -> str: ...
    @abstractmethod
    async def getinflationreward(self, param1: str, param2: str) -> str: ...
    @abstractmethod
    async def getlargestaccounts(self, filter: str) -> str: ...
    @abstractmethod
    async def getlatestblockhash(self) -> str: ...
    @abstractmethod
    async def getleaderschedule(self) -> str: ...
    @abstractmethod
    async def getmaxretransmitslot(self) -> str: ...
    @abstractmethod
    async def getmaxshredinsertslot(self) -> str: ...
    @abstractmethod
    async def getminimumbalanceforrentexemption(self, param1: str) -> str: ...
    @abstractmethod
    async def getmultipleaccounts(self, param1: str, param2: str) -> str: ...
    @abstractmethod
    async def getprogramaccounts(self, param1: str, param2: str) -> str: ...
    @abstractmethod
    async def getrecentblockhash(self) -> str: ...
    @abstractmethod
    async def getrecentperformancesamples(self, param1: str) -> str: ...
    @abstractmethod
    async def getrecentprioritizationfees(self, param1: str) -> str: ...
    @abstractmethod
    async def getsignaturesforaddress(self, param1: str) -> str: ...
    @abstractmethod
    async def getsignaturestatuses(self, param1: str, param2: str) -> str: ...
    @abstractmethod
    async def getslot(self) -> str: ...
    @abstractmethod
    async def getslotleader(self) -> str: ...
    @abstractmethod
    async def getstakeactivation(self, param1: str, param2: str) -> str: ...
    @abstractmethod
    async def getstakeminimumdelegation(self) -> str: ...
    @abstractmethod
    async def getsupply(self) -> str: ...
    @abstractmethod
    async def gettokenaccountbalance(self, param1: str) -> str: ...
    @abstractmethod
    async def gettokenaccountsbyowner(self, param1: str, param2: str, param3: str) -> str: ...
    @abstractmethod
    async def gettokenlargestaccounts(self, param1: str) -> str: ...
    @abstractmethod
    async def gettransaction(self, account: str, options: str) -> str: ...
    @abstractmethod
    async def isblockhashvalid(self, account: str, options: str) -> str: ...
    @abstractmethod
    async def simulatetransaction(self, account: str, options: str) -> str: ...
