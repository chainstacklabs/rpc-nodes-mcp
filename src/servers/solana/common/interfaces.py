"""
Auto-generated abstract methods based on JSON-RPC OpenAPI specification.
"""

from abc import ABC, abstractmethod


class BlockchainAdapter(ABC):
    @abstractmethod
    async def getaccountinfo(self, account: str, options: str) -> str: ...

    @abstractmethod
    async def getbalance(self, account: str, options: str) -> str: ...

    @abstractmethod
    async def getblock(self, slot_number: str, options: str) -> str: ...

    @abstractmethod
    async def getblockcommitment(self, slot_number: str) -> str: ...

    @abstractmethod
    async def getblockheight(self, options) -> str: ...

    @abstractmethod
    async def getblockproduction(self, options) -> str: ...

    @abstractmethod
    async def getblocks(self, start_slot: str, end_slot: str, options: str) -> str: ...

    @abstractmethod
    async def getblockswithlimit(self, start_slot: str, end_slot: str, options: str) -> str: ...

    @abstractmethod
    async def getblocktime(self, slot_number: str) -> str: ...

    @abstractmethod
    async def getclusternodes(self) -> str: ...

    @abstractmethod
    async def getepochinfo(self, options: str) -> str: ...

    @abstractmethod
    async def getepochschedule(self) -> str: ...

    @abstractmethod
    async def getfeeformessage(self, account: str, options: str) -> str: ...

    @abstractmethod
    async def getfirstavailableblock(self) -> str: ...

    @abstractmethod
    async def getgenesishash(self) -> str: ...

    @abstractmethod
    async def gethealth(self) -> str: ...

    @abstractmethod
    async def gethighestsnapshotslot(self) -> str: ...

    @abstractmethod
    async def getidentity(self) -> str: ...

    @abstractmethod
    async def getinflationgovernor(self, options: str) -> str: ...

    @abstractmethod
    async def getinflationrate(self) -> str: ...

    @abstractmethod
    async def getinflationreward(self, addresses: str, options: str) -> str: ...

    @abstractmethod
    async def getlargestaccounts(self, filter: str) -> str: ...

    @abstractmethod
    async def getlatestblockhash(self, options: str) -> str: ...

    @abstractmethod
    async def getleaderschedule(self, slot_number: str, options: str) -> str: ...

    @abstractmethod
    async def getmaxretransmitslot(self) -> str: ...

    @abstractmethod
    async def getmaxshredinsertslot(self) -> str: ...

    @abstractmethod
    async def getminimumbalanceforrentexemption(
        self, account_data_length: str, options: str
    ) -> str: ...

    @abstractmethod
    async def getmultipleaccounts(self, pubkeys: str, options: str) -> str: ...

    @abstractmethod
    async def getprogramaccounts(self, pubkey: str, options: str) -> str: ...

    @abstractmethod
    async def getrecentperformancesamples(self, samples_number: str) -> str: ...

    @abstractmethod
    async def getrecentprioritizationfees(self, addresses: str) -> str: ...

    @abstractmethod
    async def getsignaturesforaddress(self, account: str, options: str) -> str: ...

    @abstractmethod
    async def getsignaturestatuses(self, signatures: str, options: str) -> str: ...

    @abstractmethod
    async def getslot(self, options: str) -> str: ...

    @abstractmethod
    async def getslotleader(self, options: str) -> str: ...

    @abstractmethod
    async def getslotleaders(self, start_slot: str, limit: str) -> str: ...

    @abstractmethod
    async def getstakeminimumdelegation(self, options: str) -> str: ...

    @abstractmethod
    async def getsupply(self, options: str) -> str: ...

    @abstractmethod
    async def gettokenaccountbalance(self, account: str, options: str) -> str: ...

    @abstractmethod
    async def gettokenaccountsbyowner(self, param1: str, param2: str, param3: str) -> str: ...

    @abstractmethod
    async def gettokenaccountsbydelegate(self, param1: str, param2: str, param3: str) -> str: ...

    @abstractmethod
    async def gettokenlargestaccounts(self, mint: str, options: str) -> str: ...

    @abstractmethod
    async def gettokensupply(self, mint: str, options: str) -> str: ...

    @abstractmethod
    async def gettransaction(self, signature: str, options: str) -> str: ...

    @abstractmethod
    async def gettransactioncount(self, options: str) -> str: ...

    @abstractmethod
    async def getversion(self) -> str: ...

    @abstractmethod
    async def simulatetransaction(self, account: str, options: str) -> str: ...
