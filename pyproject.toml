[build-system]
requires = ["setuptools>=45", "wheel"]
build-backend = "setuptools.build_meta"

[project]
name = "mcp-v1"
version = "0.1.0"
description = "MCP server to interact with EVM blockchains"
readme = "README.md"
requires-python = ">=3.13"
dependencies = [
    "base58>=2.1.1",
    "httpx>=0.28.1",
    "mcp[cli]>=1.9.0",
    "solders>=0.26.0",
]

[project.scripts]
mcp-evm = "main_evm:main"
mcp-solana = "main_solana:main"
mcp-pumpfun = "main_pumpfun:main"

[tool.setuptools]
py-modules = ["main_evm", "main_solana", "main_pumpfun"]

[tool.setuptools.packages.find]
where = ["."]
include = ["src*"]

[tool.pytest.ini_options]
asyncio_mode = "auto"
testpaths = ["tests"]
python_files = "test_*.py"
python_functions = "test_*"
pythonpath = [".", "src"]

[tool.coverage.run]
source = ["src"]
omit = ["tests/*", "**/__pycache__/*"]

[tool.ruff]
line-length = 100
target-version = "py39"
exclude = [
    ".git",
    ".ruff_cache",
    "venv",
    "env",
    ".env",
    ".venv",
    "__pycache__",
    "dist",
]

[tool.ruff.lint]
select = [
    "E",  # pycodestyle errors
    "W",  # pycodestyle warnings
    "F",  # pyflakes
    "I",  # isort
    "B",  # flake8-bugbear
    "C4", # flake8-comprehensions
    "UP", # pyupgrade
]

# Allow autofix for all enabled rules (when `--fix`) is provided
fixable = ["ALL"]
unfixable = ["F401"]  # Don't remove unused imports

[tool.ruff.lint.mccabe]
max-complexity = 10

[tool.ruff.lint.isort]
known-first-party = ["core", "chains"]
section-order = ["future", "standard-library", "third-party", "first-party", "local-folder"]

[tool.ruff.lint.per-file-ignores]
# Allow tests to use assertions and shadowing
"tests/**/*.py" = ["S101", "F403", "F405", "E731"]

[dependency-groups]
dev = [
    "ruff>=0.1.0",
    "langchain-mcp-adapters>=0.1.0",
    "langchain-openai>=0.3.17",
    "langgraph>=0.4.5",
    "rich>=14.0.0",
]

test = [
    "pytest>=7.0.0",
    "pytest-asyncio>=0.21.0",
    "pytest-cov>=4.1.0",
]
