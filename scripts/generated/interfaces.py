"""
Auto-generated abstract methods based on JSON-RPC OpenAPI specification.
"""

from abc import ABC, abstractmethod


class BlockchainAdapter(ABC):
    @abstractmethod
    async def eth_getbalance(self, param0: str, param1: str) -> str: ...
    @abstractmethod
    async def eth_getcode(self, param0: str, param1: str) -> str: ...
    @abstractmethod
    async def eth_getproof(self, param0: str, param1: str, param2: str) -> str: ...
    @abstractmethod
    async def eth_getstorageat(self, param0: str, param1: str, param2: str) -> str: ...
    @abstractmethod
    async def eth_gettransactioncount(self, param0: str, param1: str) -> str: ...
    @abstractmethod
    async def eth_blocknumber(self) -> str: ...
    @abstractmethod
    async def eth_getblockbynumber(self, param0: str, param1: str) -> str: ...
    @abstractmethod
    async def eth_getblocktransactioncountbyhash(self, param0: str) -> str: ...
    @abstractmethod
    async def eth_getblocktransactioncountbynumber(self, param0: str) -> str: ...
    @abstractmethod
    async def eth_newblockfilter(self) -> str: ...
    @abstractmethod
    async def eth_chainid(self) -> str: ...
    @abstractmethod
    async def eth_syncing(self) -> str: ...
    @abstractmethod
    async def net_listening(self) -> str: ...
    @abstractmethod
    async def net_peercount(self) -> str: ...
    @abstractmethod
    async def web3_clientversion(self) -> str: ...
    @abstractmethod
    async def debug_tracetransaction(self, param0: str, param1: str) -> str: ...
    @abstractmethod
    async def debug_traceblockbyhash(self, param0: str, param1: str) -> str: ...
    @abstractmethod
    async def debug_traceblockbynumber(self, param0: str, param1: str) -> str: ...
    @abstractmethod
    async def debug_tracecall(self, param0: str, param1: str, param2: str) -> str: ...
    @abstractmethod
    async def debug_tracetransaction(self, param0: str, param1: str) -> str: ...
    @abstractmethod
    async def trace_block(self, param0: str) -> str: ...
    @abstractmethod
    async def trace_transaction(self, param0: str) -> str: ...
    @abstractmethod
    async def eth_call(self, param0: str, param1: str) -> str: ...
    @abstractmethod
    async def eth_sendrawtransaction(self, param0: str) -> str: ...
    @abstractmethod
    async def eth_simulatev1(self, param0: str, param1: str) -> str: ...
    @abstractmethod
    async def eth_getfilterchanges(self, param0: str) -> str: ...
    @abstractmethod
    async def eth_uninstallfilter(self, param0: str) -> str: ...
    @abstractmethod
    async def eth_estimategas(self, param0: str, param1: str) -> str: ...
    @abstractmethod
    async def eth_gasprice(self) -> str: ...
    @abstractmethod
    async def eth_maxpriorityfeepergas(self) -> str: ...
    @abstractmethod
    async def eth_getlogs(self, param0: str) -> str: ...
    @abstractmethod
    async def eth_newfilter(self, param0: str) -> str: ...
    @abstractmethod
    async def eth_getblockreceipts(self, param0: str) -> str: ...
    @abstractmethod
    async def eth_gettransactionbyblockhashandindex(self, param0: str, param1: str) -> str: ...
    @abstractmethod
    async def eth_gettransactionbyblocknumberandindex(self, param0: str, param1: str) -> str: ...
    @abstractmethod
    async def eth_gettransactionbyhash(self, param0: str) -> str: ...
    @abstractmethod
    async def eth_gettransactionreceipt(self, param0: str) -> str: ...
    @abstractmethod
    async def eth_newpendingtransactionfilter(self) -> str: ...
